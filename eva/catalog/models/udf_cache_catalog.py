# coding=utf-8
# Copyright 2018-2022 EVA
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from typing import List
from sqlalchemy import ARRAY, BINARY, JSON, Column, ForeignKey, Integer, String
from sqlalchemy.orm import relationship
from eva.catalog.models.association_models import (
    depend_udf_and_udf_cache,
    depend_column_and_udf_cache,
)
from eva.catalog.models.base_model import BaseModel


class UdfCacheCatalog(BaseModel):
    """The `UdfCacheCatalog` catalog stores information about the udf cache.

    It maintains the following information for each cache entry:
    `_row_id:` An autogenerated identifier for the cache entry.
    `_name:` The name of the cache, also referred to as the unique UDF signature.
    `_udf_id:` `_row_id` of the UDF in the `UdfCatalog` for which the cache is built.
    `_num_args:` The number of arguments that the UDF takes.
    `_arg_ids:` A serialized list of `ColumnCatalog` `_row_id`s for each argument of the UDF. If the argument is a function expression, it stores the string representation of the expression tree.
    `_udf_depends:` A list of `row_id`s of the UDFs that the cache depends on, including both the UDF being cached and the UDFs in the arguments.
    `_col_depends:` A list of `row_id`s of the columns that the cache depends on.
    """

    __tablename__ = "udf_cache"

    _name = Column("name", String(128))
    _udf_id = Column("udf_id", Integer, ForeignKey("udf._row_id"))
    _cache_path = Column("cache_path", BINARY)
    _num_args = Column("num_args", Integer)
    _arg_ids = Column("arg_ids", String(1024))

    _udf_depends = relationship(
        "UdfCatalog",
        secondary=depend_udf_and_udf_cache,
        cascade="all, delete-orphan",
    )
    _col_depends = relationship(
        "ColumnCatalog",
        secondary=depend_column_and_udf_cache,
        cascade="all, delete-orphan",
    )

    def __init__(
        self, name: str, udf_id: int, cache_path: str, num_args: int, arg_ids: List[str]
    ):
        self._name = name
        self._udf_id = udf_id
        self._cache_path = cache_path
        self._num_args = num_args
        self._arg_ids = arg_ids
